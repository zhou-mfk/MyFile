
python 中给文件加锁

fcntl模块

import fcntl

打开一个文件
f = open('./test') ##当前目录下test文件要先存在，如果不存在会报错。
对该文件加密：
fcntl.flock(f,fcntl.LOCK_EX)
这样就对文件test加锁了，如果有其他进程对test文件加锁，则不能成功，会被阻塞，但不会退出程序。
解锁：
fcntl.flock(f,fcntl.LOCK_UN)

fcntl模块：
	  flock() : flock(f, operation)
	  	operation : 包括：fcntl.LOCK_UN 解锁
	  					fcntl.LOCK_EX  排他锁
	  					fcntl.LOCK_SH  共享锁
	  					fcntl.LOCK_NB  非阻塞锁
LOCK_SH 共享锁:所有进程没有写访问权限，即使是加锁进程也没有。所有进程有读访问权限。
LOCK_EX 排他锁:除加锁进程外其他进程没有对已加锁文件读写访问权限。
LOCK_NB 非阻塞锁:如果指定此参数，函数不能获得文件锁就立即返回，否则，函数会等待获得文件锁。LOCK_NB可以同LOCK_SH或LOCK_NB进行按位或（|）运算操作。 fcnt.flock(f,fcntl.LOCK_EX|fcntl.LOCK_NB)

下面是一个简单的例子：

#!/usr/bin/python
#coding:utf8

import os
import sys
import time
import fcntl #导入模块

class FLOCK(ojbect):
    def __init__(self,name):
        """
        :param name: 文件名
        """

        self.fobj = open(name,'w')
        self.fd = self.fobj.fileno()

    def lock(self)：
        try:
            fcntl.lockf(sefl.fd,fcntl.LOCK_EX|fcntl.LOCK_NB) #给文件加锁，使用了fcntl.LOCK_NB
            print '给文件加锁，稍等 ... ...'
            time.sleep(20)
            return True
        except:
            print '文件加锁，无法执行，请稍后运行。'
            retrun False

    def unlock(self):
        self.fobj.close()
        print '已解锁'

if __name__ == "__main__":
    print sys.argv[1]
    locker = FLOCK(sys.argv[1])
    a = locker.lock()
    if a:
        print '文件已加锁'
    else:
        print '无法执行，程序已锁定，请稍等'


执行结果：
# python suo.py test
test
file lock please waiting.....  （在等待期间，在另一个终端，运行此程序会有下面的结果）
 文件已加锁



# python suo.py test
test
file no lock please check file...
无法执行，程序已锁定，请稍等 


##程序中使用了fcntl.LOCK_NB 所以程序会直接退出，没有等待。